(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(8);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function scale(viewport, original) {
    return viewport.width / original.width;
}
exports.scale = scale;
function calc(floatVal, scale) {
    if (scale === void 0) { scale = 1; }
    return Math.round((floatVal * scale));
}
exports.calc = calc;
function px(floatVal, scale) {
    if (scale === void 0) { scale = 1; }
    return calc(floatVal, scale) + "px";
}
exports.px = px;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var xhrSupported = null, xhrCORSSupported = null;
exports.getComputedStyle = function (el) {
    if ('getComputedStyle' in window) {
        return window.getComputedStyle(el);
    }
    // IE <= 8
    return el.currentStyle;
};
exports.height = function () {
    Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
};
exports.width = function () {
    Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
};
exports.support = {
    /**
     * Return true if XHR is supported
     * @returns {boolean}
     */
    isXHRSupported: function () {
        if (xhrSupported === null) {
            xhrSupported = !!_this.getXHR();
        }
        return xhrSupported;
    },
    /**
     * Return true if XHR is supported and is CORS-enabled
     * @returns {boolean}
     */
    isCORSSupported: function () {
        if (xhrCORSSupported === null) {
            xhrCORSSupported = _this.isXHRSupported() &&
                ('withCredentials' in _this.getXHR());
        }
        return xhrCORSSupported;
    },
    /**
     * Return true if XDR is supported
     * @returns {boolean}
     */
    isXDRSupported: function () {
        return typeof window.XDomainRequest !== 'undefined';
    },
    /**
     * Get a XHR object
     * @returns {XMLHttpRequest} An XHR object
     */
    getXHR: function () {
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest();
        }
        else {
            try {
                return new ActiveXObject('MSXML2.XMLHTTP.3.0');
            }
            catch (ex) {
                return null;
            }
        }
    },
    /**
     * Get a CORS-enabled request object
     * @returns {XMLHttpRequest|XDomainRequest} The request object
     */
    getXDR: function () {
        if (_this.isXDRSupported()) {
            return new window.XDomainRequest();
        }
        return null;
    },
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @author Romain BRUCKERT
 * https://github.com/adadgio/paperview-js
 */
__export(__webpack_require__(5));


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(6);
__webpack_require__(9);
__webpack_require__(11);
__webpack_require__(13);
var scale_1 = __webpack_require__(2);
var both_1 = __webpack_require__(15);
var fetch_1 = __webpack_require__(16);
var fetch_svg_1 = __webpack_require__(17);
var embed_toolbar_1 = __webpack_require__(18);
var comment_editor_1 = __webpack_require__(19);
var mouse_1 = __webpack_require__(20);
var model_1 = __webpack_require__(21);
var PaperView = /** @class */ (function () {
    function PaperView() {
        this.options = {};
        this.loaded = false;
        this.pages = [];
        this.comments = [];
        this.DOC_DIM = { width: 0, height: 0 };
        this.VIEWPORT_DIM = { width: 0, height: 0 };
        this.VIEWPORT_DIM_FORCED = false;
        this.VERSION = '1.0.5';
        this.SCROLL_NEXT = 'next';
        this.SCROLL_PREVIOUS = 'previous';
        this.ZOOM_FIT_WIDTH = 'fitwidth';
        this.listeners = { ready: function () { } };
    }
    // helper to fix Android window height/width on mobile browsers
    // https://stackoverflow.com/questions/10610743/android-browsers-screen-width-screen-height-window-innerwidth-window-inner
    PaperView.prototype.forceViewerSize = function (width, height) {
        this.VIEWPORT_DIM_FORCED = true;
        this.VIEWPORT_DIM.width = width;
        this.VIEWPORT_DIM.height = height;
        return this;
    };
    PaperView.prototype.createViewer = function (selector, opts) {
        this.options = opts;
        this.options.url = opts.url.replace(/\/$/, '');
        this.container = document.getElementById(selector.replace('#', ''));
        this.options.mode = (typeof opts.mode !== 'undefined') ? opts.mode : 'svg';
        this.options.comments = (typeof opts.comments !== 'undefined') ? both_1.both(opts.comments, { view: true, edit: true }) : { view: true, edit: true };
        this.viewport = document.createElement('div');
        this.doc = document.createElement('div');
        this.viewport.setAttribute('id', 'crocodoc-viewport');
        this.viewport.setAttribute('class', 'crocodoc-viewport');
        this.doc.setAttribute('class', 'crocodoc-doc');
        this.container.appendChild(this.viewport);
        this.viewport.appendChild(this.doc);
        // temp debug
        var debugElement = document.createElement('div');
        debugElement.setAttribute('class', 'debug');
        debugElement.innerHTML = "paperview-js v" + this.VERSION + " <span id=\"scroll-pos\"></span>";
        this.container.appendChild(debugElement);
        if (!this.VIEWPORT_DIM_FORCED) {
            this.VIEWPORT_DIM.width = this.viewport.offsetWidth;
            this.VIEWPORT_DIM.height = this.viewport.offsetHeight;
        }
        return this;
    };
    PaperView.prototype.load = function () {
        var _this = this;
        var imgsFetched = [];
        var textsLoaded = [];
        fetch_1.fetchURL(this.options.url + "/info.json", 'json').then(function (info) {
            var scaling = scale_1.scale(_this.VIEWPORT_DIM, info.dimensions);
            // create requests for each pages (svg + text elements)
            for (var i = 0; i < info.numpages; i++) {
                _this.pages.push(new model_1.Page(info.dimensions, scaling));
                if (_this.options.mode === 'svg') {
                    imgsFetched.push(fetch_svg_1.fetchSVG(_this.options.url + "/page-" + (i + 1) + ".svg"));
                }
                else if (_this.options.mode === 'canvas' || _this.options.mode === 'png') {
                    var url = _this.options.url + "/page-" + (i + 1) + ".png";
                    imgsFetched.push(Promise.resolve(url));
                }
                // @TODO uncomment to load dirty text layer
                // textsLoaded.push(fetchTEXT(`${this.options.url}/text-${i+1}.html`))
            }
            // @TODO uncomment to render dirty text layer
            // Promise.all(textsLoaded).then(res => {
            //     for (var i=0; i < info.numpages; i++) {
            //         const bodyElement: HTMLElement = res[i]
            //         const html = bodyElement.innerHTML;
            //         const page: HTMLElement = this.pages[i]
            //
            //         embedText(page, html)
            //     }
            // })
            Promise.all(imgsFetched).then(function (imgDocs) {
                for (var i = 0; i < info.numpages; i++) {
                    var page = _this.pages[i];
                    page.render(imgDocs[i], i, _this.options.mode).appendTo(_this.doc);
                }
                _this.loaded = true;
                // set sizes only when all pages are loaded
                _this.DOC_DIM.width = _this.getDocWidth();
                _this.DOC_DIM.height = _this.getDocHeight();
                if (typeof _this.listeners['ready'] === 'function') {
                    var event_1 = { eventName: 'ready', numPages: _this.pages.length, dimensions: { viewportSize: _this.VIEWPORT_DIM, docSize: _this.DOC_DIM } };
                    _this.listeners['ready'](event_1);
                }
                // attach scroll event
                _this.viewport.onscroll = function (e) {
                    if (typeof _this.listeners['scroll'] === 'function') {
                        var scrollPos = _this.getScrollPos();
                        var currPageNum = _this.getCurrentPageNum();
                        document.getElementById('scroll-pos').innerText = "" + scrollPos;
                        var event_2 = { eventName: 'scroll', scrollTop: scrollPos, numPages: _this.pages.length, currentPage: currPageNum };
                        _this.listeners['scroll'](event_2);
                        // show current page and other info in toolbar
                        embed_toolbar_1.updateToolbar(currPageNum);
                    }
                };
                if (true === _this.options.comments.view) {
                    _this.loadComments();
                }
                if (true === _this.options.comments.edit) {
                    _this.enableComments();
                }
                // display the toolbar when document is loaded
                // embedToolbar(this)
            }).catch(function (error) { console.log(error); });
        });
    };
    PaperView.prototype.loadComments = function () {
        var _this = this;
        fetch_1.fetchURL(this.options.url + "/comments.json", 'json').then(function (comments) {
            comments = (null === comments) ? [] : comments;
            _this.comments = comments.map(function (data) { return new model_1.Comment(data); });
            _this.renderComments();
        });
    };
    PaperView.prototype.renderComments = function () {
        for (var i in this.comments) {
            var page = this.pages[this.comments[i].pageNum];
            this.comments[i].render().appendTo(page, this.VIEWPORT_DIM.width);
        }
    };
    PaperView.prototype.getDocHeight = function () {
        if (!this.loaded) {
            console.warn("All pages are not loaded yet and you are calling ::getDocHeight before: height value could be flawed.");
        }
        return this.doc.offsetHeight;
    };
    PaperView.prototype.getDocWidth = function () {
        if (!this.loaded) {
            console.warn("All pages are not loaded yet and you are calling ::getDocWidth before: width value could be flawed.");
        }
        return this.doc.offsetWidth;
    };
    PaperView.prototype.getScrollPos = function () {
        return this.viewport.scrollTop;
    };
    PaperView.prototype.getPageOffset = function (pageNum) {
        return this.pages[pageNum - 1].offsetTop(pageNum);
    };
    PaperView.prototype.getCurrentPageNum = function () {
        var scrollPos = this.getScrollPos();
        // page num would be the page currently at 2/3 of viewport
        var scrollPosFixed = scrollPos + (this.VIEWPORT_DIM.height * 0.666);
        var pageNum = 0;
        var pagesTotalHeight = 0;
        for (var i in this.pages) {
            pagesTotalHeight += this.pages[i].height;
            if (scrollPosFixed >= pagesTotalHeight) {
                pageNum++;
            }
        }
        return pageNum;
    };
    PaperView.prototype.scrollTo = function (pixels) {
        pixels = (typeof pixels === 'string') ? parseInt(pixels) : pixels;
        this.viewport.scrollTop = pixels;
        return this;
    };
    PaperView.prototype.scrollToPage = function (number) {
        var pixels = this.getPageTopDistFromTop(number);
        if (null !== pixels) {
            this.scrollTo(pixels);
        }
        else {
            console.warn("::scrollToPage() Cannot scroll because this page number does not exist)");
        }
        return this;
    };
    PaperView.prototype.scrollTop = function () {
        this.viewport.scrollTop = 0;
        return this;
    };
    PaperView.prototype.scrollBy = function (pixels) {
        pixels = (typeof pixels === 'string') ? parseInt(pixels) : pixels;
        this.viewport.scrollTop += pixels;
        return this;
    };
    PaperView.prototype.on = function (eventName, callback) {
        this.listeners[eventName] = callback;
        return this;
    };
    PaperView.prototype.addPlugin = function (name) {
    };
    PaperView.prototype.getPageDistFromTop = function (number) {
        var pixels = 0;
        var scrollTop = this.viewport.scrollTop;
        for (var i in this.pages) {
            var index = parseInt(i);
            var pageHeight = this.pages[i].height;
            // pixels +=
            // @TODO
            // if ((index === number)) {
            //
            // }
        }
        return null;
    };
    PaperView.prototype.getPageTopDistFromTop = function (number) {
        var pixels = 0;
        for (var i in this.pages) {
            if ((parseInt(i) + 1) === number) {
                return pixels;
            }
            pixels += this.pages[i].height;
        }
        return pixels;
    };
    PaperView.prototype.enableComments = function () {
        var _this = this;
        comment_editor_1.commentEditor().onSave(function (comment) {
            _this.comments.push(comment);
            _this.renderComments();
        });
        mouse_1.Mouse.enable().up(function (e, coords) {
            comment_editor_1.commentEditor().hide();
            var selection = lightrange.getSelectionInfo();
            var currPageNum = _this.getCurrentPageNum();
            // let pageTopDist = this.getPageDistFromTop(currPageNum)
            // let topFromPage = selection.yStart + pageTopDist
            // let selection = window.getSelection()
            // let oRange = selection.getRangeAt(0) // get text range
            // let oRect = oRange.getBoundingClientRect()
            // let pageNum = this.getCurrentPageNum()
            //
            // let jsonComment: JsonComment = {
            //     pageNum: pageNum,
            //     top: oRect.top,
            //     left: oRect.left,
            //     text: selection.toString(),
            //     scrollPos: this.getScrollPos(),
            //     viewportDimension: this.VIEWPORT_DIM,
            // }
            if (selection.characters === 0) {
                return;
            }
            // let realPageSelected = e.target;
            // let comment: Comment = new Comment({
            //     pageNum: currPageNum,
            //     top: topFromPage,
            //     left: selection.xStart,
            //     text: selection.text,
            //     scrollPos: this.getScrollPos(),
            //     viewportDimension: this.VIEWPORT_DIM,
            // })
            // commentEditor().show(comment, coords)
        });
    };
    return PaperView;
}());
exports.PaperView = PaperView;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(7);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(1)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./viewer.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./viewer.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(0)(false);
// imports


// module
exports.push([module.i, "*, html, body {\n  touch-action: manipulation !important; }\n\n.crocodoc-viewport {\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch; }\n\n.crocodoc-doc {\n  width: auto;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  font-size: 100%;\n  background-color: #f3f3f3; }\n  .crocodoc-doc.crocodoc-doc-background-gray {\n    background-color: #f3f3f3; }\n\n.crocodoc-page-custom {\n  position: relative;\n  background-color: #fff;\n  margin-left: auto;\n  margin-right: auto;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.crocodoc-page-svg-custom,\n.crocodoc-page-text-customn\n.crocodoc-page-canvas-custom {\n  width: 100%;\n  height: 100%;\n  position: absolute; }\n\n.crocodoc-page-text-custom .textLayer {\n  height: 100%;\n  position: absolute;\n  width: 100% !important;\n  height: 100% !important; }\n  .crocodoc-page-text-custom .textLayer > div {\n    position: absolute; }\n\n.debug {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  background: #FFF8DC;\n  padding: 8px;\n  color: #5a5a5a;\n  font-family: Arial, sans-serif;\n  font-size: 12px; }\n\n.line1 {\n  position: absolute;\n  width: 1px;\n  top: 0px;\n  left: 203px;\n  height: 251px;\n  z-index: 99; }\n\n.line2 {\n  position: absolute;\n  background: green;\n  width: 1px;\n  top: 0px;\n  left: 208px;\n  height: 251px;\n  z-index: 100; }\n", ""]);

// exports


/***/ }),
/* 8 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(10);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(1)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./toolbar.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./toolbar.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(0)(false);
// imports


// module
exports.push([module.i, ".crocodoc-toolbar {\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n  background-color: #333;\n  border-radius: 3px;\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px;\n  font-size: 14px;\n  font-family: Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n  .crocodoc-toolbar .crocodoc-toolbar-inner {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    color: #f9f9f9;\n    padding: 16px 8px; }\n    .crocodoc-toolbar .crocodoc-toolbar-inner a {\n      color: inherit;\n      text-decoration: none; }\n    .crocodoc-toolbar .crocodoc-toolbar-inner .crocodoc-toolbar-element {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      padding-left: 8px;\n      padding-left: 8px; }\n\n.ico {\n  max-width: 256px;\n  max-height: 256px; }\n\n.ico.ico-zoom-in {\n  color: white;\n  width: 20px;\n  height: 20px;\n  font-size: 16px;\n  background-image: url(\"data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDUyLjk2NiA1Mi45NjYiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDUyLjk2NiA1Mi45NjY7IiB4bWw6c3BhY2U9InByZXNlcnZlIiB3aWR0aD0iMjRweCIgaGVpZ2h0PSIyNHB4Ij4KPGc+Cgk8cGF0aCBkPSJNMjguOTgzLDIwaC02di02YzAtMC41NTItMC40NDgtMS0xLTFzLTEsMC40NDgtMSwxdjZoLTZjLTAuNTUyLDAtMSwwLjQ0OC0xLDFzMC40NDgsMSwxLDFoNnY2YzAsMC41NTIsMC40NDgsMSwxLDEgICBzMS0wLjQ0OCwxLTF2LTZoNmMwLjU1MiwwLDEtMC40NDgsMS0xUzI5LjUzNSwyMCwyOC45ODMsMjB6IiBmaWxsPSIjMDAwMDAwIi8+Cgk8cGF0aCBkPSJNNTEuNzA0LDUxLjI3M0wzNi44NDUsMzUuODJjMy43OS0zLjgwMSw2LjEzOC05LjA0MSw2LjEzOC0xNC44MmMwLTExLjU4LTkuNDItMjEtMjEtMjFzLTIxLDkuNDItMjEsMjFzOS40MiwyMSwyMSwyMSAgIGM1LjA4MywwLDkuNzQ4LTEuODE3LDEzLjM4NC00LjgzMmwxNC44OTUsMTUuNDkxYzAuMTk2LDAuMjA1LDAuNDU4LDAuMzA3LDAuNzIxLDAuMzA3YzAuMjUsMCwwLjQ5OS0wLjA5MywwLjY5My0wLjI3OSAgIEM1Mi4wNzQsNTIuMzA0LDUyLjA4Niw1MS42NzEsNTEuNzA0LDUxLjI3M3ogTTIuOTgzLDIxYzAtMTAuNDc3LDguNTIzLTE5LDE5LTE5czE5LDguNTIzLDE5LDE5cy04LjUyMywxOS0xOSwxOSAgIFMyLjk4MywzMS40NzcsMi45ODMsMjF6IiBmaWxsPSIjMDAwMDAwIi8+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPGc+CjwvZz4KPC9zdmc+Cg==\"); }\n", ""]);

// exports


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(12);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(1)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./comment.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./comment.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(0)(false);
// imports


// module
exports.push([module.i, ".crocodoc-doc .crocodoc-page-custom {\n  position: relative; }\n  .crocodoc-doc .crocodoc-page-custom .crocodoc-comment {\n    position: absolute;\n    width: auto;\n    font-size: 14px;\n    font-family: Arial, sans-serif;\n    opacity: 0.9;\n    border-radius: 2px;\n    -moz-border-radius: 2px;\n    -webkit-border-radius: 2px;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    margin-top: -6px; }\n    .crocodoc-doc .crocodoc-page-custom .crocodoc-comment.visible {\n      display: block; }\n    .crocodoc-doc .crocodoc-page-custom .crocodoc-comment.hidden {\n      display: none; }\n    .crocodoc-doc .crocodoc-page-custom .crocodoc-comment .crocodoc-comment-underline {\n      position: absolute;\n      width: 100%;\n      height: 1px;\n      border-top: 2px dashed red; }\n    .crocodoc-doc .crocodoc-page-custom .crocodoc-comment .crocodoc-comment-text {\n      color: #f5f5f5;\n      background-color: #333;\n      margin-top: 8px; }\n      .crocodoc-doc .crocodoc-page-custom .crocodoc-comment .crocodoc-comment-text .crocodoc-comment-text-inner {\n        line-height: 1.6em;\n        max-width: 460px;\n        word-wrap: break-word;\n        padding: 4px 8px; }\n\n.crocodoc-comment-editor {\n  position: fixed;\n  color: #333;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0px 0px 8px #e4e4e4;\n  background-color: #fff;\n  font-size: 14px;\n  font-family: Arial, sans-serif;\n  z-index: 99;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  border-radius: 3px;\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px; }\n  .crocodoc-comment-editor .crocodoc-comment-editor-inner {\n    display: flex;\n    flex-direction: column;\n    padding: 16px 24px; }\n    .crocodoc-comment-editor .crocodoc-comment-editor-inner label {\n      color: gray;\n      margin-bottom: 8px; }\n    .crocodoc-comment-editor .crocodoc-comment-editor-inner textarea {\n      color: inherit;\n      font-size: inherit;\n      font-family: inherit;\n      padding: 8px;\n      background: #fbfbfb;\n      border: 1px solid #e0e0e0;\n      margin-bottom: 8px; }\n      .crocodoc-comment-editor .crocodoc-comment-editor-inner textarea:focus {\n        outline: none; }\n    .crocodoc-comment-editor .crocodoc-comment-editor-inner button {\n      cursor: pointer;\n      color: #fff;\n      font-size: inherit;\n      font-family: inherit;\n      border: none;\n      padding: 8px;\n      background-color: #2663c1;\n      border-radius: 2px;\n      -moz-border-radius: 2px;\n      -webkit-border-radius: 2px;\n      outline: none;\n      animation: background-color 0.3s ease; }\n      .crocodoc-comment-editor .crocodoc-comment-editor-inner button:hover {\n        background-color: #3574d6; }\n", ""]);

// exports


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(14);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(1)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./animations.scss", function() {
			var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./animations.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(0)(false);
// imports


// module
exports.push([module.i, "@keyframes fadeIn {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n\n@keyframes fadeOut {\n  from {\n    opacity: 1; }\n  to {\n    opacity: 0; } }\n\n.fade-in {\n  animation: fadeIn .20s forwards; }\n\n.fade-out {\n  animation: fadeOut .20s forwards; }\n", ""]);

// exports


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function both(value, fallbacks) {
    var result = fallbacks;
    if (typeof value === 'boolean') {
        for (var _i = 0, _a = Object.keys(fallbacks); _i < _a.length; _i++) {
            var prop = _a[_i];
            result[prop] = value;
        }
    }
    else if (typeof value === 'object') {
        result = value;
    }
    return result;
}
exports.both = both;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var support_1 = __webpack_require__(3);
function fetchURL(url, type, handler) {
    if (type === void 0) { type = 'text'; }
    if (handler === void 0) { handler = function () { }; }
    return new Promise(function (resolve, reject) {
        var xhr = support_1.support.getXHR();
        xhr.responseType = type; //'arraybuffer|string'. seel also https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
        xhr.open('GET', url, true); // let true be async request
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                var status_1 = xhr.status;
                // remove the onreadystatechange handler,
                // because it could be called again
                // @NOTE: we replace it with a noop function, because
                // IE8 will throw an error if the value is not of type
                // 'function' when using ActiveXObject
                xhr.onreadystatechange = function () { };
                // status is 0 for successful local file requests, so assume 200
                if (status_1 === 0) {
                    status_1 = 200;
                }
                if (status_1 < 500) {
                    if (status_1 !== 200) {
                        console.warn("fetchURL() Resolved to " + status_1);
                    }
                    resolve(xhr.response);
                }
                else {
                    reject(xhr);
                }
            }
        };
        // this needs to be after the open call and before the send call
        xhr.withCredentials = true;
        xhr.send();
    });
}
exports.fetchURL = fetchURL;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var support_1 = __webpack_require__(3);
function fetchSVG(url, handler) {
    if (handler === void 0) { handler = function () { }; }
    return new Promise(function (resolve, reject) {
        var xhr = support_1.support.getXHR();
        xhr.responseType = 'document';
        xhr.overrideMimeType('image/svg+xml');
        xhr.open('GET', url, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                var status_1 = xhr.status;
                // remove the onreadystatechange handler,
                // because it could be called again
                // @NOTE: we replace it with a noop function, because
                // IE8 will throw an error if the value is not of type
                // 'function' when using ActiveXObject
                xhr.onreadystatechange = function () { };
                // status is 0 for successful local file requests, so assume 200
                if (status_1 === 0) {
                    status_1 = 200;
                }
                if (status_1 === 200) {
                    resolve(xhr.responseXML.documentElement);
                    // if (type === 'document') {
                    //
                    // } else {
                    //     resolve(xhr.responseText)
                    // }
                }
                else {
                    reject(xhr);
                }
            }
        };
        // this needs to be after the open call and before the send call
        xhr.withCredentials = true;
        xhr.send();
    });
}
exports.fetchSVG = fetchSVG;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_ZOOM = 1.0;
var ZOOM = 1.0;
var ORIGINAL_SIZE;
function zoomSize(tuple, scale) {
    return { width: (tuple.width * scale), height: tuple.height * scale };
}
exports.zoomSize = zoomSize;
function zoomInOrOut(viewer, zoomCoef) {
    // ZOOM = Math.round(ZOOM * zoomCoef)
    // let originalSize = viewer.getDocHeight()
    if (zoomCoef === 1) {
        // @TODO Not finding satisfiying solution to rever to default zoom
        // revert to original zoom level (coef = 1)
    }
    for (var i in viewer.pages) {
        var width = parseInt(viewer.pages[i].width) * zoomCoef;
        var height = parseInt(viewer.pages[i].height) * zoomCoef;
        viewer.pages[i].width = Math.round(width);
        viewer.pages[i].height = Math.round(height);
        viewer.pages[i].nativeElement.width = Math.round(width) + "px";
        viewer.pages[i].nativeElement.height = Math.round(height) + "px";
        // @TODO Tried to adjust scroll when zoom is modified
        // but this does not yield satisfing results
        // let heightDiff = originalHeight - Math.round(originalHeight * zoomCoef)
        // height diff will automatically be negative when zoomed
        // if (zoomCoef < 1) {
        //     viewer.scrollBy(-100 * zoomCoef)
        // } else if (zoomCoef > 1) {
        //     viewer.scrollBy(100)
        // }
    }
}
exports.zoomInOrOut = zoomInOrOut;
function updateToolbar(currentPage) {
    var element = document.getElementById('crocodoc-toolbar-pages');
    if (element) {
        element.innerText = "" + currentPage;
    }
}
exports.updateToolbar = updateToolbar;
function embedToolbar(viewer) {
    var element = document.createElement('div');
    element.setAttribute('class', 'crocodoc-toolbar');
    if (element == null) {
        return;
    }
    element.innerHTML = "<div class=\"crocodoc-toolbar\">\n        <div class=\"crocodoc-toolbar-inner\">\n            <a class=\"crocodoc-toolbar-element\" href=\"\" id=\"crodococ-btn-zoom-in\">In</a>\n            <a class=\"crocodoc-toolbar-element\" href=\"\" id=\"crodococ-btn-zoom-out\">Out</a>\n            <a class=\"crocodoc-toolbar-element\" href=\"\" id=\"crodococ-btn-zoom-fit\">Fit</a>\n            <span id=\"crocodoc-toolbar-pages\" class=\"crocodoc-toolbar-element crocodoc-toolbar-pages\"></span>\n        </div>\n    </div>";
    document.body.appendChild(element);
    var zoomInBtn = document.getElementById('crodococ-btn-zoom-in');
    var zoomOutBtn = document.getElementById('crodococ-btn-zoom-out');
    var zoomFitBtn = document.getElementById('crodococ-btn-zoom-fit');
    // ORIGINAL_SIZE.width = parseInt(viewer.pages[0].style.width)
    // ORIGINAL_SIZE.height = parseInt(viewer.pages[0].style.height)
    zoomInBtn.onclick = function (e) {
        e.preventDefault();
        e.stopPropagation();
        zoomInOrOut(viewer, DEFAULT_ZOOM + 0.15);
    };
    zoomOutBtn.onclick = function (e) {
        e.preventDefault();
        e.stopPropagation();
        zoomInOrOut(viewer, DEFAULT_ZOOM - 0.15);
    };
    zoomFitBtn.onclick = function (e) {
        e.preventDefault();
        e.stopPropagation();
        zoomInOrOut(viewer, DEFAULT_ZOOM);
    };
}
exports.embedToolbar = embedToolbar;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var onSaved = function () { };
var EDITOR_ID = 'crocodoc-comment-editor';
function show(comment, coords) {
    var editor = document.createElement('div');
    editor.setAttribute('id', EDITOR_ID);
    editor.setAttribute('class', 'crocodoc-comment-editor fade-in');
    editor.innerHTML = "<div class=\"crocodoc-comment-editor-inner\">\n        <label>Comment on this</label>\n        <textarea cols=\"28\" rows=\"4\" name=\"crodocodoc_comment_text\"></textarea>\n        <button id=\"crocodoc-comment-save-btn\">Save</button>\n    </div>";
    document.body.appendChild(editor);
    // place the comment editor next to the mouse
    if (coords) {
        editor.style.top = coords.y + "px";
        editor.style.left = coords.x + "px";
    }
    // prevent mousedown events to bubble up to the dom otherwise
    // editor gets hidden again as soon as the  mouse goes up when you
    // are trying to fill in the textarea or click on the button
    editor.onmouseup = function (e) {
        e.stopPropagation();
    };
    var button = document.getElementById('crocodoc-comment-save-btn');
    var textarea = document.getElementsByName('crodocodoc_comment_text')[0];
    // textarea.onfocus = (e) => {
    //     e.preventDefault()
    // }
    button.onclick = function (e) {
        e.preventDefault();
        comment.text = textarea.value;
        onSaved(comment);
    };
}
function hide() {
    var editor = document.getElementById(EDITOR_ID);
    if (editor) {
        editor.setAttribute('class', 'crocodoc-comment-editor fade-out');
        document.body.removeChild(editor);
    }
}
function onSave(then) {
    onSaved = then;
}
function commentEditor() {
    return {
        show: show,
        hide: hide,
        onSave: onSave
    };
}
exports.commentEditor = commentEditor;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MouseClass = /** @class */ (function () {
    function MouseClass() {
        this.coordinates = { x: null, y: null };
    }
    MouseClass.prototype.enable = function () {
        var _this = this;
        document.onmousemove = function (e) {
            _this.coordinates = { x: e.pageX, y: e.pageY };
        };
        return this;
    };
    MouseClass.prototype.up = function (then) {
        var _this = this;
        document.onmouseup = function (e) {
            then(e, _this.getCoords());
        };
    };
    MouseClass.prototype.getCoords = function () {
        return this.coordinates;
    };
    return MouseClass;
}());
exports.Mouse = new MouseClass();


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(22));
__export(__webpack_require__(25));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var scale_1 = __webpack_require__(2);
var embed_svg_1 = __webpack_require__(23);
var embed_canvas_1 = __webpack_require__(24);
var Page = /** @class */ (function () {
    function Page(size, scale) {
        if (scale === void 0) { scale = 1; }
        this.scale = 1;
        this.scale = scale;
        this.baseWidth = size.width;
        this.baseHeight = size.height;
    }
    Page.prototype.appendTo = function (doc) {
        doc.appendChild(this.nativeElement);
        return this;
    };
    Page.prototype.render = function (imgDoc, index, rendering) {
        if (rendering === void 0) { rendering = 'svg'; }
        this.nativeElement = document.createElement('div');
        this.nativeElement.setAttribute('class', 'crocodoc-page-custom');
        this.nativeElement.setAttribute('data-index', "" + index);
        // scale the width and height according to scale
        this.width = scale_1.calc(this.baseWidth, this.scale);
        this.height = scale_1.calc(this.baseHeight, this.scale);
        this.nativeElement.setAttribute('style', "width: " + this.width + "px; height:" + this.height + "px");
        if (rendering === 'canvas') {
            embed_canvas_1.embedCANVAS(this.nativeElement, imgDoc);
        }
        else if (rendering === 'svg') {
            embed_svg_1.embedSVG(this.nativeElement, imgDoc);
        }
        return this;
    };
    Page.prototype.offsetTop = function (index) {
        index = (typeof index === 'string') ? parseInt(index) : index;
        return ((index + 1) * this.height) - this.height;
    };
    return Page;
}());
exports.Page = Page;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function embedSVG(page, svgDoc) {
    var pageSvg = document.createElement('div');
    pageSvg.setAttribute('class', 'crocodoc-page-svg-custom');
    // scale the svg image to fit the page container
    // viewBox="0 0 800 1136.38722716249"
    svgDoc.setAttribute('preserveAspectRatio', 'xMinYMin slice'); // slice|meet
    // svgDoc.setAttribute('width', `${page.offsetWidth}px`)
    // svgDoc.setAttribute('height', `${page.offsetHeight}px`)
    svgDoc.setAttribute('width', "100%");
    svgDoc.setAttribute('height', "100%");
    // svgDoc.setAttribute('viewBox', `0 0 ${page.offsetWidth} ${page.offsetHeight}`)
    pageSvg.appendChild(svgDoc);
    page.appendChild(pageSvg);
}
exports.embedSVG = embedSVG;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function embedCANVAS(page, imgUrl) {
    var pageCanvas = document.createElement('div');
    pageCanvas.setAttribute('class', 'crocodoc-page-canvas-custom');
    page.appendChild(pageCanvas);
    var image = new Image();
    var canvas = document.createElement('canvas');
    image.onload = function () {
        var scaleFactor = 1.8;
        canvas.width = page.offsetWidth / scaleFactor;
        canvas.height = page.offsetHeight / scaleFactor;
        // let w = page.offsetWidth * scaleFactor
        // let h = page.offsetHeight * scaleFactor
        var ctx = canvas.getContext('2d');
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height); //
        pageCanvas.appendChild(canvas);
    };
    image.src = imgUrl;
}
exports.embedCANVAS = embedCANVAS;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Comment = /** @class */ (function () {
    function Comment(data) {
        this.top = data.top;
        this.left = data.left;
        this.text = data.text;
        this.pageNum = data.pageNum;
        this.scrollPos = data.scrollPos;
        this.viewportDimension = data.viewportDimension;
        this.author = data.author;
    }
    Comment.prototype.render = function () {
        this.nativeElement = document.createElement('div');
        this.nativeElement.setAttribute('class', 'crocodoc-comment');
        this.nativeElement.innerHTML = "<div class=\"crocodoc-comment-underline\"></div>\n            <div class=\"crocodoc-comment-text\"><div class=\"crocodoc-comment-text-inner\">" + this.text + "</div></div>";
        return this;
    };
    Comment.prototype.appendTo = function (page, newViewportWidth) {
        page.nativeElement.appendChild(this.nativeElement);
        // real positions can only be calculated when the element is effecitvely
        // appended to the dom (because such values come from browser rendering btw)
        var computedStyles = getComputedStyle(this.nativeElement);
        // scale the comment top/left positions from stored values and possibly
        // different viewport size (with width diff because height does not affect scaling
        var scaledTopPos = (newViewportWidth * this.top) / this.viewportDimension.width;
        var scaledLeftPos = (newViewportWidth * this.left) / this.viewportDimension.width;
        // let topFix = 25;
        // height and width only exist when the element exists in the DOM
        this.nativeElement.style.top = (scaledTopPos + 28) + "px";
        this.nativeElement.style.left = scaledLeftPos + "px";
        return this;
    };
    Comment.prototype.removeFrom = function (page) {
        this.nativeElement.remove();
        return this;
    };
    Comment.prototype.serialize = function () {
        return {
            top: this.top,
            left: this.left,
            text: this.text,
            pageNum: this.pageNum,
            scrollPos: this.scrollPos,
            viiewportDimension: this.viewportDimension,
            author: this.author,
        };
    };
    return Comment;
}());
exports.Comment = Comment;


/***/ })
/******/ ]);
});